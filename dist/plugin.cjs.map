{"version":3,"file":"plugin.cjs","sources":["../src/strategies.ts","../src/index.ts"],"sourcesContent":["import { type CSSRuleSelectorTransformer } from './index';\n\ninterface Options {\n  ignore?: string[];\n  remove?: string[];\n}\n\ntype SelectorBasedStrategy<ExtraOptions = unknown> = (\n  selectors: string | string[],\n  options?: Options & ExtraOptions,\n) => CSSRuleSelectorTransformer;\n\nconst optionsHandlerForIgnoreAndRemove = (\n  selector: string,\n  { ignore, remove }: Options = {},\n): string | null => {\n  if (remove?.some((s) => selector.includes(s)) === true) {\n    return '';\n  }\n  if (ignore?.some((s) => selector.includes(s)) === true) {\n    return selector;\n  }\n  return null;\n};\n\nconst roots = new Set([\n  'html',\n  'body',\n  ':host',\n]);\nfunction isRootSelector(selector: string) {\n  return roots.has(selector);\n}\n\nfunction isBeforeOrAfter(ruleSelector: string) {\n  return ruleSelector.includes('::before') || ruleSelector.includes('::after');\n}\nfunction isPseudoElementSelector(ruleSelector: string) {\n  return ruleSelector.includes('::');\n}\n\n/**\n * Isolates the TailwindCSS preflight styles inside of the container (assuming all the TailwindCSS is inside of this container)\n *\n * @param containerSelectors\n * @param options\n * @param options.ignore - list of preflight CSS selectors to ignore (don't isolate) - these will not be affected by the transformation\n * @param options.remove - list of preflight CSS selectors to remove from the final CSS - use it if you have any specific conflicts and really want to remove some preflight rules\n * @param options.rootStyles - 'move to container' (default) - moves the root styles to the container styles (by simply replacing the selector), 'add :where' - adds ` :where` to the root selector so styles are still in roots, but only matching items would be affected\n *\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-inside-of-container (example)\n */\nexport const isolateInsideOfContainer: SelectorBasedStrategy<{\n  except?: string;\n  rootStyles?: 'move to container' | 'add :where';\n}> = (containerSelectors, options) => {\n  const whereNotExcept =\n    typeof options?.except === 'string' && options.except\n      ? `:where(:not(${options.except},${options.except} *))`\n      : '';\n\n  const selectorsArray = [containerSelectors].flat();\n  const whereDirect = `:where(${selectorsArray.join(',')})`;\n  const whereWithSubs = `:where(${selectorsArray.map((s) => `${s},${s} *`).join(',')})`;\n\n  return ({ ruleSelector }) => {\n    const handled = optionsHandlerForIgnoreAndRemove(ruleSelector, options);\n    if (handled != null) {\n      return handled;\n    }\n\n    if (isRootSelector(ruleSelector)) {\n      if (options?.rootStyles === 'add :where') {\n        return `${ruleSelector}${whereNotExcept} ${whereDirect}`;\n      }\n      return selectorsArray.map((s) => `${s}${whereNotExcept}`).join(',');\n    } else if (isBeforeOrAfter(ruleSelector)) {\n      return `${whereWithSubs}${whereNotExcept}${ruleSelector}`;\n    } else if (isPseudoElementSelector(ruleSelector)) {\n      return `${whereWithSubs}${whereNotExcept} ${ruleSelector}`;\n    } else {\n      return `${ruleSelector}${whereWithSubs}${whereNotExcept}`;\n    }\n  };\n};\n\n/**\n * Isolates the TailwindCSS preflight styles outside of the container (assuming no TailwindCSS inside of it)\n * @param containerSelectors\n * @param options\n * @param options.ignore - list of preflight CSS selectors to ignore (don't isolate) - these will not be affected by the transformation\n * @param options.remove - list of preflight CSS selectors to remove from the final CSS - use it if you have any specific conflicts and really want to remove some preflight rules\n *\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-outside-of-container (example)\n */\nexport const isolateOutsideOfContainer: SelectorBasedStrategy<{ plus?: string }> = (\n  containerSelectors,\n  options,\n) => {\n  const whereNotContainerSelector = `:where(:not(${[containerSelectors]\n    .flat()\n    .map((s) => `${s},${s} *`)\n    .join(',')}))`;\n\n  const insideOfContainerLogic =\n    typeof options?.plus === 'string' && options.plus\n      ? isolateInsideOfContainer(options.plus)\n      : null;\n\n  return ({ ruleSelector, ...rest }) => {\n    const ignoreOrRemove = optionsHandlerForIgnoreAndRemove(ruleSelector, options);\n    if (ignoreOrRemove != null) {\n      return ignoreOrRemove;\n    }\n\n    if (isRootSelector(ruleSelector)) {\n      return ruleSelector;\n    }\n\n    return [\n      isBeforeOrAfter(ruleSelector)\n        ? `${whereNotContainerSelector}${ruleSelector}`\n        : isPseudoElementSelector(ruleSelector)\n          ? `${whereNotContainerSelector} ${ruleSelector}`\n          : `${ruleSelector}${whereNotContainerSelector}`,\n      insideOfContainerLogic?.({ ruleSelector, ...rest }),\n    ]\n      .filter(Boolean)\n      .join(',');\n  };\n};\n\n/**\n * @deprecated Use `isolateInsideOfContainer` with rootStyles option set to 'add :where'\n * @description Isolates the TailwindCSS preflight styles within the component selector (not inside of the container, but immediately)\n * @param componentSelectors\n * @param options\n * @param options.ignore - list of preflight CSS selectors to ignore (don't isolate) - these will not be affected by the transformation\n * @param options.remove - list of preflight CSS selectors to remove from the final CSS - use it if you have any specific conflicts and really want to remove some preflight rules\n *\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight#update-your-tailwind-css-configuration (example)\n */\nexport const isolateForComponents: SelectorBasedStrategy = (\n  componentSelectors,\n  options,\n): CSSRuleSelectorTransformer => {\n  const componentSelectorsArray = [componentSelectors].flat();\n  const whereComponentSelectorsDirect = `:where(${componentSelectorsArray.join(',')})`;\n  const whereComponentSelectorsWithSubs = `:where(${componentSelectorsArray\n    .map((s) => `${s},${s} *`)\n    .join(',')})`;\n\n  return ({ ruleSelector }) =>\n    optionsHandlerForIgnoreAndRemove(ruleSelector, options) ??\n    (isRootSelector(ruleSelector)\n      ? `${ruleSelector} ${whereComponentSelectorsDirect}`\n      : `${ruleSelector}${whereComponentSelectorsWithSubs}`);\n};\n","import TailwindPlugin from 'tailwindcss/plugin.js';\nimport postcss from 'postcss';\nimport { type CSSRuleObject } from 'tailwindcss/types/config.js';\nimport { readFileSync } from 'fs';\n\nconst { withOptions } = TailwindPlugin;\n\ninterface PropsFilterInput {\n  selectorSet: Set<string>;\n  property: string;\n  value: any;\n}\n\nexport type CSSRuleSelectorTransformer = (info: { ruleSelector: string }) => string;\n\ntype ModifyResult = string | null | undefined;\n\ntype ModifyStylesHook = (input: PropsFilterInput) => ModifyResult;\n\ninterface PluginOptions {\n  isolationStrategy: CSSRuleSelectorTransformer;\n  /** @deprecated prefer using modifyPreflightStyles */\n  propsFilter?: (input: PropsFilterInput) => boolean | undefined;\n  modifyPreflightStyles?: Record<string, Record<string, ModifyResult>> | ModifyStylesHook;\n}\n\n/**\n * TailwindCSS plugin to scope the preflight styles\n * @param isolationStrategy - function to transform the preflight CSS selectors,\n *  import {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-inside-of-container isolateInsideOfContainer},\n *  {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-outside-of-container isolateOutsideOfContainer},\n *  {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#update-your-tailwind-css-configuration isolateForComponents} or write {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#your-owncustom-isolation-strategy your own}\n * @param propsFilter - function to filter the preflight CSS properties and values, return false to remove the property. Any other value (including true and undefined) will leave the prop intact\n * @param modifyPreflightStyles - function to modify the preflight CSS properties and their values, return null to remove the property. Any other returned value will be used as a new value for the property. If you don't want to change it - return the old value (provided in argument object as `value`).\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight (documentation)\n */\nexport const scopedPreflightStyles = withOptions<PluginOptions>(\n  ({ isolationStrategy, propsFilter, modifyPreflightStyles }) =>\n    ({ addBase, corePlugins }) => {\n      const baseCssPath = require.resolve('tailwindcss/lib/css/preflight.css');\n      const baseCssStyles = postcss.parse(readFileSync(baseCssPath, 'utf8'));\n\n      if (typeof isolationStrategy !== 'function') {\n        throw new Error(\n          \"TailwindCssScopedPreflightPlugin: isolationStrategy option must be a function - custom one or pre-bundled - import { isolateInsideOfContainer, isolateOutsideOfContainer, isolateForComponents } from 'tailwindcss-scoped-preflight-plugin')\",\n        );\n      }\n\n      if (corePlugins('preflight')) {\n        throw new Error(\n          `TailwindCssScopedPreflightPlugin: TailwindCSS corePlugins.preflight config option must be set to false`,\n        );\n      }\n\n      let modifyStylesHook: ModifyStylesHook | undefined;\n      if (typeof modifyPreflightStyles === 'function') {\n        modifyStylesHook = modifyPreflightStyles;\n      } else if (modifyPreflightStyles) {\n        const configEntries = Object.entries(modifyPreflightStyles);\n        modifyStylesHook = ({ selectorSet, property, value }) => {\n          const matchingEntry = configEntries.find(([sel]) => selectorSet.has(sel));\n          return matchingEntry?.[1]?.[property];\n        };\n      }\n\n      baseCssStyles.walkRules((rule) => {\n        if (propsFilter || modifyPreflightStyles) {\n          const selectorSet = new Set(rule.selectors);\n          rule.nodes = rule.nodes?.map((node) => {\n            if (node instanceof postcss.Declaration) {\n              const newValue = modifyStylesHook\n                ? modifyStylesHook({\n                    selectorSet,\n                    property: node.prop,\n                    value: node.value,\n                  })\n                : node.value;\n\n              const filterValue = propsFilter\n                ? propsFilter({\n                    selectorSet,\n                    property: node.prop,\n                    value: node.value,\n                  })\n                : true;\n              if (filterValue === false || newValue === null) {\n                return postcss.comment({\n                  text: node.toString(),\n                });\n              } else if (typeof newValue !== 'undefined' && newValue !== node.value) {\n                node.value = newValue;\n              }\n            }\n            return node;\n          });\n        }\n        rule.selectors = rule.selectors\n          .map((s) => isolationStrategy({ ruleSelector: s }))\n          .filter((value, index, array) => value && array.indexOf(value) === index);\n        rule.selector = rule.selectors.join(',\\n');\n        if (!rule.nodes.some((n) => n instanceof postcss.Declaration)) {\n          rule.nodes = [];\n        }\n      });\n\n      addBase(\n        baseCssStyles.nodes.filter((node, i, all) => {\n          const next = all[i + 1];\n          return node instanceof postcss.Rule\n            ? node.nodes.length > 0 && node.selector\n            : node instanceof postcss.Comment\n              ? next instanceof postcss.Rule && next.selector && next.nodes.length > 0\n              : true;\n        }) as unknown as CSSRuleObject[],\n      );\n    },\n  () => ({\n    corePlugins: {\n      preflight: false,\n    },\n  }),\n);\n\nexport * from './strategies';\n"],"names":["optionsHandlerForIgnoreAndRemove","selector","ignore","remove","some","s","includes","roots","Set","isRootSelector","has","isBeforeOrAfter","ruleSelector","isPseudoElementSelector","isolateInsideOfContainer","containerSelectors","options","whereNotExcept","except","selectorsArray","flat","whereDirect","join","whereWithSubs","map","handled","rootStyles","isolateOutsideOfContainer","whereNotContainerSelector","insideOfContainerLogic","plus","rest","ignoreOrRemove","filter","Boolean","isolateForComponents","componentSelectors","componentSelectorsArray","whereComponentSelectorsDirect","whereComponentSelectorsWithSubs","_optionsHandlerForIgn","withOptions","TailwindPlugin","scopedPreflightStyles","isolationStrategy","propsFilter","modifyPreflightStyles","addBase","corePlugins","baseCssPath","require","resolve","baseCssStyles","postcss","parse","readFileSync","Error","modifyStylesHook","configEntries","Object","entries","selectorSet","property","value","_matchingEntry$","matchingEntry","find","sel","walkRules","rule","_rule$nodes","selectors","nodes","node","Declaration","newValue","prop","filterValue","comment","text","toString","index","array","indexOf","n","i","all","next","Rule","length","Comment","preflight"],"mappings":"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"}