{"version":3,"file":"plugin.esm.js","sources":["../src/index.ts"],"sourcesContent":["import {withOptions} from 'tailwindcss/plugin.js';\nimport {readFileSync} from 'fs';\nimport postcss from 'postcss';\n\ninterface PluginOptions {\n  preflightSelector: string;\n  enable?: boolean;\n  disableCorePreflight?: boolean;\n}\n\nexport const scopedPreflightStyles = withOptions<PluginOptions>(\n  ({ enable = true, preflightSelector: preflightSelector }) =>\n    ({ addBase, corePlugins }) => {\n      if (!enable) {\n        return () => undefined;\n      }\n      const preflightCssPath = require.resolve('tailwindcss/lib/css/preflight.css');\n      if (!preflightSelector) {\n        throw new Error(\n          'TailwindCssScopedPreflightPlugin: selector to manually enable the TailwindCss preflight styles is not provided',\n        );\n      }\n      if (corePlugins('preflight')) {\n        throw new Error(\n          `TailwindCssScopedPreflightPlugin: set corePlugins.preflight config option (TailwindCSS) to false or explicitly tell tailwindcss-scoped-preflight plugin to do so by using the disableCorePreflight option`,\n        );\n      }\n\n      const preflightStyles = postcss.parse(readFileSync(preflightCssPath, 'utf8'));\n\n      // Scope the selectors to specific components\n      preflightStyles.walkRules((rule) => {\n        rule.selectors = rule.selectors.map(\n          (s) => `${s}:where(${preflightSelector},${preflightSelector} *)`,\n        );\n        rule.selector = rule.selectors.join(',\\n');\n      });\n\n      addBase(preflightStyles.nodes as any);\n    },\n  ({ enable = true, disableCorePreflight }) =>\n    enable && disableCorePreflight\n      ? {\n          corePlugins: {\n            preflight: false,\n          },\n        }\n      : {},\n);\n"],"names":["scopedPreflightStyles","withOptions","enable","preflightSelector","addBase","corePlugins","undefined","preflightCssPath","require","resolve","Error","preflightStyles","postcss","parse","readFileSync","walkRules","rule","selectors","map","s","selector","join","nodes","disableCorePreflight","preflight"],"mappings":";;;;AAUaA,MAAAA,qBAAqB,GAAGC,WAAW,CAC9C,CAAC;AAAEC,EAAAA,MAAM,GAAG,IAAI;AAAEC,EAAAA,iBAAiB,EAAEA,iBAAAA;AAAiB,CAAE,KACtD,CAAC;EAAEC,OAAO;AAAEC,EAAAA,WAAAA;AAAa,CAAA,KAAI;EAC3B,IAAI,CAACH,MAAM,EAAE;AACX,IAAA,OAAO,MAAMI,SAAS,CAAA;AACvB,GAAA;AACD,EAAA,MAAMC,gBAAgB,GAAGC,OAAO,CAACC,OAAO,CAAC,mCAAmC,CAAC,CAAA;EAC7E,IAAI,CAACN,iBAAiB,EAAE;AACtB,IAAA,MAAM,IAAIO,KAAK,CACb,gHAAgH,CACjH,CAAA;AACF,GAAA;AACD,EAAA,IAAIL,WAAW,CAAC,WAAW,CAAC,EAAE;AAC5B,IAAA,MAAM,IAAIK,KAAK,CACb,CAAA,yMAAA,CAA2M,CAC5M,CAAA;AACF,GAAA;AAED,EAAA,MAAMC,eAAe,GAAGC,OAAO,CAACC,KAAK,CAACC,YAAY,CAACP,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAA;AAE7E;AACAI,EAAAA,eAAe,CAACI,SAAS,CAAEC,IAAI,IAAI;AACjCA,IAAAA,IAAI,CAACC,SAAS,GAAGD,IAAI,CAACC,SAAS,CAACC,GAAG,CAChCC,CAAC,IAAK,GAAGA,CAAC,CAAA,OAAA,EAAUhB,iBAAiB,CAAIA,CAAAA,EAAAA,iBAAiB,KAAK,CACjE,CAAA;IACDa,IAAI,CAACI,QAAQ,GAAGJ,IAAI,CAACC,SAAS,CAACI,IAAI,CAAC,KAAK,CAAC,CAAA;AAC5C,GAAC,CAAC,CAAA;AAEFjB,EAAAA,OAAO,CAACO,eAAe,CAACW,KAAY,CAAC,CAAA;AACvC,CAAC,EACH,CAAC;AAAEpB,EAAAA,MAAM,GAAG,IAAI;AAAEqB,EAAAA,oBAAAA;AAAoB,CAAE,KACtCrB,MAAM,IAAIqB,oBAAoB,GAC1B;AACElB,EAAAA,WAAW,EAAE;AACXmB,IAAAA,SAAS,EAAE,KAAA;AACZ,GAAA;AACF,CAAA,GACD,EAAE;;;;"}