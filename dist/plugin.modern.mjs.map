{"version":3,"file":"plugin.modern.mjs","sources":["../src/index.ts"],"sourcesContent":["import { withOptions } from 'tailwindcss/plugin.js';\nimport { readFileSync } from 'fs';\nimport postcss from 'postcss';\n\ninterface PluginOptions {\n  cssSelector: string;\n  mode?: 'matched only' | 'under matched' | 'except matched';\n}\n\nexport const scopedPreflightStyles = withOptions<PluginOptions>(\n  ({ mode, cssSelector }) =>\n    ({ addBase, corePlugins }) => {\n      const baseCssPath = require.resolve('tailwindcss/lib/css/preflight.css');\n      const baseCssStyles = postcss.parse(readFileSync(baseCssPath, 'utf8'));\n\n      if (!cssSelector) {\n        throw new Error('TailwindCssScopedPreflightPlugin: cssSelector options is not provided');\n      }\n\n      if (corePlugins('preflight')) {\n        throw new Error(\n          `TailwindCssScopedPreflightPlugin: TailwindCSS corePlugins.preflight config option must be set to false`,\n        );\n      }\n\n      baseCssStyles.walkRules((rule) => {\n        rule.selectors = rule.selectors.map((s) => {\n          if (mode === 'except matched') {\n            return `${s}:where(:not(${cssSelector} *))`;\n          } else if (\n            mode === 'under matched' &&\n            ['html', ':host', 'body'].includes(s)\n          ) {\n            return cssSelector;\n          } else {\n            // matched only\n            return `${s}:where(${cssSelector},${cssSelector} *)`;\n          }\n        });\n        rule.selector = rule.selectors\n          .filter((value, index, array) => array.indexOf(value) === index)\n          .join(',\\n');\n      });\n\n      addBase(baseCssStyles.nodes as any);\n    },\n  () => ({\n    corePlugins: {\n      preflight: false,\n    },\n  }),\n);\n"],"names":["scopedPreflightStyles","withOptions","mode","cssSelector","addBase","corePlugins","baseCssPath","require","resolve","baseCssStyles","postcss","parse","readFileSync","Error","walkRules","rule","selectors","map","s","includes","selector","filter","value","index","array","indexOf","join","nodes","preflight"],"mappings":";;;;AASaA,MAAAA,qBAAqB,GAAGC,WAAW,CAC9C,CAAC;EAAEC,IAAI;AAAEC,EAAAA,WAAAA;CAAa,KACpB,CAAC;EAAEC,OAAO;AAAEC,EAAAA,WAAAA;AAAa,CAAA,KAAI;AAC3B,EAAA,MAAMC,WAAW,GAAGC,OAAO,CAACC,OAAO,CAAC,mCAAmC,CAAC,CAAA;AACxE,EAAA,MAAMC,aAAa,GAAGC,OAAO,CAACC,KAAK,CAACC,YAAY,CAACN,WAAW,EAAE,MAAM,CAAC,CAAC,CAAA;EAEtE,IAAI,CAACH,WAAW,EAAE;AAChB,IAAA,MAAM,IAAIU,KAAK,CAAC,uEAAuE,CAAC,CAAA;AACzF,GAAA;AAED,EAAA,IAAIR,WAAW,CAAC,WAAW,CAAC,EAAE;AAC5B,IAAA,MAAM,IAAIQ,KAAK,CACb,CAAA,sGAAA,CAAwG,CACzG,CAAA;AACF,GAAA;AAEDJ,EAAAA,aAAa,CAACK,SAAS,CAAEC,IAAI,IAAI;IAC/BA,IAAI,CAACC,SAAS,GAAGD,IAAI,CAACC,SAAS,CAACC,GAAG,CAAEC,CAAC,IAAI;MACxC,IAAIhB,IAAI,KAAK,gBAAgB,EAAE;AAC7B,QAAA,OAAU,CAAAgB,EAAAA,CAAgB,CAAAf,YAAAA,EAAAA,YAAiB,IAAA,CAAA,CAAA;AAC5C,OAAA,MAAM,IACLD,IAAI,KAAK,eAAe,IACxB,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAACiB,QAAQ,CAACD,CAAC,CAAC,EACrC;AACA,QAAA,OAAOf,WAAW,CAAA;AACnB,OAAA,MAAM;AACL;AACA,QAAA,UAAUe,CAAC,CAAA,OAAA,EAAUf,WAAe,CAAA,CAAA,EAAAA,YAAgB,GAAA,CAAA,CAAA;AACrD,OAAA;AACH,KAAC,CAAC,CAAA;AACFY,IAAAA,IAAI,CAACK,QAAQ,GAAGL,IAAI,CAACC,SAAS,CAC3BK,MAAM,CAAC,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,KAAKA,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,KAAKC,KAAK,CAAC,CAC/DG,IAAI,CAAC,KAAK,CAAC,CAAA;AAChB,GAAC,CAAC,CAAA;AAEFtB,EAAAA,OAAO,CAACK,aAAa,CAACkB,KAAY,CAAC,CAAA;AACrC,CAAC,EACH,OAAO;AACLtB,EAAAA,WAAW,EAAE;AACXuB,IAAAA,SAAS,EAAE,KAAA;AACZ,GAAA;AACF,CAAA,CAAC;;;;"}